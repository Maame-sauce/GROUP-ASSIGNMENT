INSERT_DATA.sql
-- Insert into country
INSERT INTO country (countryname) VALUES
('Kenya'),
('USA'),
('UK');

-- Insert into address_status
Insert INTO address_status (status_name) VALUES
('Current'),
('Old');

-- Insert into address
INSERT INTO address (street, city, postal_code, country_id) VALUES
('Moi Avenue' , 'Nairobi', '00100', 1),
('Mwiki Avenue', 'Kitale', '30200', 3);

-- Insert into customer
INSERT INTO customer (first_name, last_name, email, phone) VALUES
('Dinah' , 'Avoga', 'dinahavoga@gmail.com', '0768975434'),
('Amos' , 'Havard', 'amoshavard@gmail.com', '0723475434');

-- Insert into customer_address
INSERT INTO customer_address (customer_id, address_id, address_status_id) VALUES
(1, 1, 1),
(2, 2, 1);

-- Insert into book_language
INSERT INTO book_language (name) VALUES
('English'),
('Swahili'),
('French');

-- Insert into publisher
INSERT INTO publisher (name, country_id) VALUES
('Excel Books', 3),
('Longhorn Publishers', 1);

-- Insert into book
INSERT INTO book (title, language_id, publisher_id, publisher_year, price, stock_qty) VALUES
('Introduction to Excel', 1, 1, 2020, 1600.00, 10),
('Master Javascript in Kiswahili', 2, 2, 2023, 1200.00, 8);

-- Insert into author
INSERT INTO author (first_name, last_name) VALUES
('Alison', 'Chen'),
('Christopher', 'Lopez');

-- Insert into book_author
INSERT INTO book_author(book_id, author_id) VALUES
(1, 1),
(2, 2);

-- Insert into shipping_method
INSERT INTO shipping_method (name) VALUES
('Express Shipping'),
('Standard Shipping');

-- Insert into order_status
INSERT INTO order_status (status_name) VALUES
('Pending'),
('Shipped'),
('Delivered');

-- Insert into cust_order
INSERT INTO cust_order(customer_id, order_date, shipping_method_id, order_status_id) VALUES
(1, '2025-03-15', 1, 1),
(2, '2025-04-02', 2, 2);

-- Insert into order_line
INSERT INTO order_line (order_id, book_id, quantity) VALUES
(1, 1, 1),
(2, 2, 2);

-- Insert into order_history
INSERT INTO order_history (order_id, status_id, change_date) VALUES
(1, 1, '2025-03-15'),
(2, 2, '2025-04-02')

SAMPLE QUERIES.sql
-- Get all books and their authors
SELECT b.title AS book_title, a.first_name, a.last_name
FROM book b
JOIN book_author ba ON b.book_id = ba.book_id 
JOIN author a ON ba.author_id = a.author_id;

-- Show all customer orders with their order status
SELECT co.order_id, c.first_name, c.last_name, co.order_date, os.status_name
FROM cust_order co
JOIN customer c ON co.customer_id = c.customer_id
JOIN order_status os ON co.order_status_id = os.order_status_id;

-- List all books in stock with language and publisher
SELECT b.title, bl.name AS language, p.name AS publisher, b.stock_qty
FROM book b
JOIN book_language bl ON b.language_id = bl.language_id
JOIN publisher p ON b.publisher_id = p.publisher_id;

-- Get all addresses of a specific customer
SELECT c.first_name, c.last_name, a.street, a.city, cs.status_name
FROM customer c
JOIN customer_address ca ON c.customer_id = ca.customer_id 
JOIN address a ON ca.address_id = a.address_id
JOIN address_status cs ON ca.address_status_id = cs.address_status_id
WHERE c.customer_id = 1;

-- Find the total quantity of books ordered by book title
SELECT b.title, SUM(ol.quantity) AS total_ordered
FROM order_line ol
JOIN book b ON ol. book_id = b.book_id
GROUP BY b.title;

-- Find the total quantity of books ordered by book title
SELECT oh.order_id, os.status_name, oh.change_date
FROM order_history oh
JOIN order_status os ON oh. status_id = os.order_status_id
WHERE oh.order_id = 1
ORDER BY oh.change_date;

SHCHEMA.sql
-- Create table country
CREATE TABLE country (
country_id INT PRIMARY KEY AUTO_INCREMENT,
countryname VARCHAR (100) NOT NULL);

-- Create table address_status
CREATE TABLE address_status (
address_status_id INT PRIMARY KEY AUTO_INCREMENT,
status_name VARCHAR(50) NOT NULL);


-- Create table address
CREATE TABLE address (
address_id INT PRIMARY KEY AUTO_INCREMENT,
street VARCHAR (100),
city VARCHAR (50),
postal_code VARCHAR (20),
country_id INT,
FOREIGN KEY (country_id) REFERENCES country (country_id));

-- Create table customer
CREATE TABLE customer (
customer_id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR (50),
last_name VARCHAR (50) ,
email VARCHAR (100),
phone VARCHAR (20));

-- Create table customer_address
CREATE TABLE customer_address (
customer_id INT,
address_id INT,
address_status_id INT,
PRIMARY KEY (customer_id, address_id),
FOREIGN KEY (customer_id) REFERENCES customer (customer_id),
FOREIGN KEY (address_id) REFERENCES address (address_id),
FOREIGN KEY (address_status_id) REFERENCES address_status (address_status_id));

-- Create table book_language
CREATE TABLE book_language (
language_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR (100));

-- Create table publisher
CREATE TABLE publisher (
publisher_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR (100),
country_id INT,
FOREIGN KEY (country_id) REFERENCES country (country_id));

-- Create table book
CREATE TABLE book (
book_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR (200),
language_id INT,
publisher_id INT,
publisher_year YEAR,
price DECIMAL(8,2),
stock_qty INT,
FOREIGN KEY (language_id) REFERENCES book_language (language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher (publisher_id));

-- Create table author
CREATE TABLE author (
author_id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR (50),
last_name VARCHAR (50));

-- Create table book_author
CREATE TABLE book_author (
book_id INT NOT NULL,
author_id INT,
PRIMARY KEY (book_id, author_id),
FOREIGN KEY (book_id) REFERENCES book (book_id),
FOREIGN KEY (author_id) REFERENCES author (author_id));

-- Create table shipping_method
CREATE TABLE shipping_method (
shipping_method_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR (100));

-- Create table order_status
CREATE TABLE order_status (
order_status_id INT PRIMARY KEY AUTO_INCREMENT,
status_name VARCHAR (50));


-- Creates table cust_order
CREATE TABLE cust_order (
order_id INT PRIMARY KEY AUTO_INCREMENT,
customer_id INT,
order_date DATE,
shipping_method_id INT,
order_status_id INT,
FOREIGN KEY (customer_id) REFERENCES  customer (customer_id),
FOREIGN KEY (shipping_method_id) REFERENCES shipping_method (shipping_method_id),
FOREIGN KEY (order_status_id) REFERENCES order_status (order_status_id));

-- Create table order_line
CREATE TABLE order_line (
order_line_id INT PRIMARY KEY AUTO_INCREMENT,
order_id INT,
book_id INT,
quantity INT,
FOREIGN KEY (order_id) REFERENCES cust_order (order_id),
FOREIGN KEY (book_id) REFERENCES book (book_id));

-- Create table order_history
CREATE TABLE order_history (
history_id INT PRIMARY KEY AUTO_INCREMENT,
order_id INT,
status_id INT,
change_date DATE,
FOREIGN KEY (order_id) REFERENCES cust_order (order_id),
FOREIGN KEY (status_id) REFERENCES order_status (order_status_id));

USER_ROLE.sql
-- Creating a user and granting database privilege
CREATE USER 'admin_user'@'localhost'
IDENTIFIED BY '1234';
GRANT ALL ON bookstore_db.* TO 'admin_user'@'localhost';

-- Creating a user and granting table privilege
CREATE USER 'john'@'localhost'
IDENTIFIED BY '1234';
GRANT ALL ON bookstore_db.book TO 'john'@'localhost';

-- Creating a user and granting global privilege
CREATE USER 'Tim'@'localhost'
IDENTIFIED BY '1234';
GRANT ALL ON *.* TO 'Tim'@'localhost';
